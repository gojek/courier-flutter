"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?r.createElement(h,a(a({ref:n},c),{},{components:t})):r.createElement(h,a({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={},a=void 0,p={unversionedId:"Setup Connection",id:"Setup Connection",title:"Setup Connection",description:"AuthProvider",source:"@site/docs/Setup Connection.md",sourceDirName:".",slug:"/Setup Connection",permalink:"/courier-flutter/docs/Setup Connection",draft:!1,editUrl:"https://github.com/gojek/courier-flutter/edit/main/docs/docs/Setup Connection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sample App",permalink:"/courier-flutter/docs/Sample App"},next:{title:"Configuring Client",permalink:"/courier-flutter/docs/Configuring Client"}},s={},l=[{value:"AuthProvider",id:"authprovider",level:2},{value:"Setup CourierClient with DioAuthProvider",id:"setup-courierclient-with-dioauthprovider",level:2},{value:"Providing Token API URL with JSON Credential Response",id:"providing-token-api-url-with-json-credential-response",level:3},{value:"Map JSON to CourierConnectOptions",id:"map-json-to-courierconnectoptions",level:3},{value:"Setup CourierClient with your own AuthProvider",id:"setup-courierclient-with-your-own-authprovider",level:2},{value:"Connect Options properties",id:"connect-options-properties",level:2}],c={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"authprovider"},"AuthProvider"),(0,o.kt)("p",null,"This is an interface containing method to fetchConnectOptions used by the Client to connect to broker"),(0,o.kt)("h2",{id:"setup-courierclient-with-dioauthprovider"},"Setup CourierClient with DioAuthProvider"),(0,o.kt)("p",null,"To fetch ConnectionCredential (host, port, etc) from HTTP endpoint, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"DioAuthProvider")," passing these params."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Dio")," : We use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/dio"},"dio")," package for making HTTP request. This will provide you flexibility to use your own Dio instance in case you have various custom headers need to be sent to the server (e.g Authentication, etc). ")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"tokenApi"),": An endpoint URL that returns JSON containing credential for mapping to ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierConnectOptions"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"authResponseMapper"),": Instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthResponseMapper")," for mapping JSON returned by ",(0,o.kt)("inlineCode",{parentName:"p"},"tokenAPI")," URL to ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierConnectOptions"),"."))),(0,o.kt)("h3",{id:"providing-token-api-url-with-json-credential-response"},"Providing Token API URL with JSON Credential Response"),(0,o.kt)("p",null,"To connect to MQTT broker you need to provide an endpoint URL that returns JSON containing these payload. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "clientId": "randomcourier1234567",\n    "username": "randomcourier1234567",\n    "password": "randomcourier4321",\n    "host": "broker.mqttdashboard.com",\n    "port": 1883,\n    "cleanSession": true,\n    "keepAlive": 45\n}\n')),(0,o.kt)("h3",{id:"map-json-to-courierconnectoptions"},"Map JSON to CourierConnectOptions"),(0,o.kt)("p",null,"You need to create and implement ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthResponseMapper")," to map the JSON to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierConnectOptions")," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'class CourierResponseMapper implements AuthResponseMapper {\n  @override\n  CourierConnectOptions map(Map<String, dynamic> response) => CourierConnectOptions(\n      clientId: response["clientId"],\n      username: response["username"],\n      host: response["host"],\n      port: response["port"],\n      cleanSession: response["cleanSession"],\n      keepAliveSeconds: response["keepAlive"],\n      password: response[\'password\']\n  );\n}\n')),(0,o.kt)("h2",{id:"setup-courierclient-with-your-own-authprovider"},"Setup CourierClient with your own AuthProvider"),(0,o.kt)("p",null,"In case you want to fetch the connect options using your own implementation, you can implement AuthProvider interface like so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"// Example of fetching connectOptions locally without making remote HTTP API Call.\nclass LocalAuthProvider implements AuthProvider {\n  final CourierConnectOptions connectOptions;\n\n  LocalAuthProvider({required this.connectOptions});\n\n  @override\n  Future<CourierConnectOptions> fetchConnectOptions() {\n    return Future<CourierConnectOptions>.value(connectOptions);\n  }\n}\n")),(0,o.kt)("h2",{id:"connect-options-properties"},"Connect Options properties"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"CourierConnectOptions")," represents the properties of the underlying MQTT connection in Courier."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"IP"),": host URI of an MQTT broker."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Port"),": port of an MQTT broker."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Client Id"),": Unique ID of the MQTT client."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Username"),": Username of the MQTT client."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Password"),": Password of the MQTT client."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"KeepAlive Interval"),": Interval at which keep alive packets are sent for the MQTT connection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Clean Session Flag"),": When clean session is false, a persistent connection is created. Otherwise, non-persistent connection is created and all persisted information is cleared from both client and broker.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final String host;\nfinal int port;\nfinal int keepAliveSeconds;\nfinal String clientId;\nfinal String username;\nfinal String password;\nfinal Bool isCleanSession;\n")))}d.isMDXComponent=!0}}]);