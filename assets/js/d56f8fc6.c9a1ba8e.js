"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1856:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=t(7462),o=(t(7294),t(3905));const i={},a=void 0,p={unversionedId:"Setup Connection",id:"Setup Connection",title:"Setup Connection",description:"Providing Token API URL with JSON Credential Response",source:"@site/docs/Setup Connection.md",sourceDirName:".",slug:"/Setup Connection",permalink:"/courier-flutter/docs/Setup Connection",draft:!1,editUrl:"https://github.com/gojek/courier-flutter/edit/main/docs/docs/Setup Connection.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sample App",permalink:"/courier-flutter/docs/Sample App"},next:{title:"Configuring Client",permalink:"/courier-flutter/docs/Configuring Client"}},s={},l=[{value:"Providing Token API URL with JSON Credential Response",id:"providing-token-api-url-with-json-credential-response",level:2},{value:"Map JSON to CourierConnectOptions",id:"map-json-to-courierconnectoptions",level:2},{value:"Setup CourierClient with Token API and Auth Mapper",id:"setup-courierclient-with-token-api-and-auth-mapper",level:2},{value:"Connect Options properties",id:"connect-options-properties",level:2}],c={toc:l};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"providing-token-api-url-with-json-credential-response"},"Providing Token API URL with JSON Credential Response"),(0,o.kt)("p",null,"To connect to MQTT broker you need to provide an endpoint URL that returns JSON containing these payload. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "clientId": "randomcourier1234567",\n    "username": "randomcourier1234567",\n    "password": "randomcourier4321",\n    "host": "broker.mqttdashboard.com",\n    "port": 1883,\n    "cleanSession": true,\n    "keepAlive": 45\n}\n')),(0,o.kt)("h2",{id:"map-json-to-courierconnectoptions"},"Map JSON to CourierConnectOptions"),(0,o.kt)("p",null,"You need to create and implement ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthResponseMapper")," to map the JSON to the ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierConnectOptions")," instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'class CourierResponseMapper implements AuthResponseMapper {\n  @override\n  CourierConnectOptions map(Map<String, dynamic> response) => CourierConnectOptions(\n      clientId: response["clientId"],\n      username: response["username"],\n      host: response["host"],\n      port: response["port"],\n      cleanSession: response["cleanSession"],\n      keepAliveSeconds: response["keepAlive"],\n      password: response[\'password\']\n  );\n}\n')),(0,o.kt)("h2",{id:"setup-courierclient-with-token-api-and-auth-mapper"},"Setup CourierClient with Token API and Auth Mapper"),(0,o.kt)("p",null,"You need to pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"tokenAPI")," URL and ",(0,o.kt)("inlineCode",{parentName:"p"},"authResponseMapper")," when initializing the   ",(0,o.kt)("inlineCode",{parentName:"p"},"CourierClient")," like so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},'final CourierClient courierClient = CourierClient.create(\n    dio: Dio(),\n    config: CourierConfiguration(\n        tokenApi: "https://example.com/courier-credentials/",\n        authResponseMapper: CourierResponseMapper(),\n        //...\n    )\n);\n')),(0,o.kt)("p",null,"We use ",(0,o.kt)("a",{parentName:"p",href:"https://pub.dev/packages/dio"},"dio")," package for making HTTP request. This will provide you flexibility to use your own Dio instance in case you have various custom headers need to be sent to the server (e.g Authentication, etc). "),(0,o.kt)("h2",{id:"connect-options-properties"},"Connect Options properties"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"/// IP Host address of the broker\nfinal String host;\n/// Port of the broker\nfinal int port;\n/// Keep Alive interval used to ping the broker over time to maintain the long run connection\nfinal int keepAliveSeconds;\n/// Unique Client ID used by broker to identify connected clients\nfinal String clientId;\n/// Username of the client\nfinal String username;\n/// Password of the client used for authentication by the broker\nfinal String password;\n/// Tells broker whether to clear the previous session by the clients\nfinal Bool isCleanSession;\n")))}u.isMDXComponent=!0}}]);