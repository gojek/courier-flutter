"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[928],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var s=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,s)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,s,n=function(e,t){if(null==e)return{};var r,s,n={},i=Object.keys(e);for(s=0;s<i.length;s++)r=i[s],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)r=i[s],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var c=s.createContext({}),p=function(e){var t=s.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},b=s.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),l=p(r),b=n,m=l["".concat(c,".").concat(b)]||l[b]||d[b]||i;return r?s.createElement(m,a(a({ref:t},u),{},{components:r})):s.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,a=new Array(i);a[0]=b;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[l]="string"==typeof e?e:n,a[1]=o;for(var p=2;p<i;p++)a[p]=r[p];return s.createElement.apply(null,a)}return s.createElement.apply(null,r)}b.displayName="MDXCreateElement"},1264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var s=r(7462),n=(r(7294),r(3905));const i={},a=void 0,o={unversionedId:"Subscribe & Receive Message",id:"Subscribe & Receive Message",title:"Subscribe & Receive Message",description:"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message.",source:"@site/docs/Subscribe & Receive Message.md",sourceDirName:".",slug:"/Subscribe & Receive Message",permalink:"/courier-flutter/docs/Subscribe & Receive Message",draft:!1,editUrl:"https://github.com/gojek/courier-flutter/edit/main/docs/docs/Subscribe & Receive Message.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Message QoS",permalink:"/courier-flutter/docs/Message QoS"},next:{title:"Publish Message",permalink:"/courier-flutter/docs/Publish Message"}},c={},p=[{value:"Subscribe to Topic",id:"subscribe-to-topic",level:3},{value:"Received Message from Subscribed Topic",id:"received-message-from-subscribed-topic",level:3},{value:"Receive Bytes(Uint8List) from Subscribed Topic",id:"receive-bytesuint8list-from-subscribed-topic",level:3},{value:"Unsubscribe from Topic",id:"unsubscribe-from-topic",level:3}],u={toc:p},l="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(l,(0,s.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message."),(0,n.kt)("h3",{id:"subscribe-to-topic"},"Subscribe to Topic"),(0,n.kt)("p",null,"To subscribe to a topic from the broker, invoke ",(0,n.kt)("inlineCode",{parentName:"p"},"susbscribe")," method on CourierClient passing the topic string and QoS."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.subscribe("chat/user1", QoS.one);\n')),(0,n.kt)("h3",{id:"received-message-from-subscribed-topic"},"Received Message from Subscribed Topic"),(0,n.kt)("p",null,"After you have subscribed to the topic, you need to listen to a message stream passing the associated topic. ",(0,n.kt)("inlineCode",{parentName:"p"},"courierMessageStream")," will loop message adapters trying to decode the data into specified type, the first one that is able to decode, will be used. You will need pass a decoder parameter to return instance of your object given 1 dynamic parameter depending on the adapter (JSONMessageAdapter pass you ",(0,n.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),", BytesMessageAdapter pass you ",(0,n.kt)("inlineCode",{parentName:"p"},"Uint8List"),")"),(0,n.kt)("p",null,"Optionally you can pass ",(0,n.kt)("inlineCode",{parentName:"p"},"MessageAdapter")," If this is passed, it will use it decode the data to `T`` type, otherwise it will use the messageAdapters list passed when initializing CourierClient."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},'/// This uses BytesMessageAdapter passed when initializing CourierClient and constructor tear-offs TestData.fromBytes\ncourierClient\n    .courierMessageStream<TestData>(\n        "orders/6b57d4e5-0fce-4917-b343-c8a1c77405e5/update",\n        decoder: TestData.fromBytes)\n    .listen((event) {\n  print("Message received testData: ${event.textMessage}");\n});\n\n/// This uses passed JSONMessageAdapter and constructor tear-offs Person.fromJson\ncourierClient\n    .courierMessageStream<Person>(\n        "person/6b57d4e5-0fce-4917-b343-c8a1c77405e5/update",\n        decoder: Person.fromJson,\n        adapter: const JSONMessageAdapter())\n    .listen((person) {\n  print("Message received person: ${person.name}");\n')),(0,n.kt)("h3",{id:"receive-bytesuint8list-from-subscribed-topic"},"Receive Bytes(Uint8List) from Subscribed Topic"),(0,n.kt)("p",null,"After you have subscribed to the topic, you need to listen to a message stream passing the associated topic. The type of the parameter in the ",(0,n.kt)("inlineCode",{parentName:"p"},"courierBytesStream")," listen callback is byte array ",(0,n.kt)("inlineCode",{parentName:"p"},"UInt8List"),"."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.courierBytesStream("chat/user1").listen((message) {\n    print("Message received: ${event}");\n});\n')),(0,n.kt)("h3",{id:"unsubscribe-from-topic"},"Unsubscribe from Topic"),(0,n.kt)("p",null,"To unsubscribe from a topic, simply invoke ",(0,n.kt)("inlineCode",{parentName:"p"},"unsubscribe")," passing the topic string."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.unsubscribe("chat/user/1");\n')))}d.isMDXComponent=!0}}]);