"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[928],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=n.createContext({}),u=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(a.Provider,{value:t},e.children)},l="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=u(r),m=i,d=l["".concat(a,".").concat(m)]||l[m]||b[m]||o;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=m;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c[l]="string"==typeof e?e:i,s[1]=c;for(var u=2;u<o;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>b,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var n=r(7462),i=(r(7294),r(3905));const o={},s=void 0,c={unversionedId:"Subscribe & Receive Message",id:"Subscribe & Receive Message",title:"Subscribe & Receive Message",description:"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message.",source:"@site/docs/Subscribe & Receive Message.md",sourceDirName:".",slug:"/Subscribe & Receive Message",permalink:"/courier-flutter/docs/Subscribe & Receive Message",draft:!1,editUrl:"https://github.com/gojek/courier-flutter/edit/main/docs/docs/Subscribe & Receive Message.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Message QoS",permalink:"/courier-flutter/docs/Message QoS"},next:{title:"Publish Message",permalink:"/courier-flutter/docs/Publish Message"}},a={},u=[{value:"Subscribe to Topic",id:"subscribe-to-topic",level:3},{value:"Receive Message from Subscribed Topic",id:"receive-message-from-subscribed-topic",level:3},{value:"Unsubscribe from Topic",id:"unsubscribe-from-topic",level:3}],p={toc:u},l="wrapper";function b(e){let{components:t,...r}=e;return(0,i.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message."),(0,i.kt)("h3",{id:"subscribe-to-topic"},"Subscribe to Topic"),(0,i.kt)("p",null,"To subscribe to a topic from the broker, invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"susbscribe")," method on CourierClient passing the topic string and QoS."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.subscribe("chat/user1", QoS.one);\n')),(0,i.kt)("h3",{id:"receive-message-from-subscribed-topic"},"Receive Message from Subscribed Topic"),(0,i.kt)("p",null,"After you have subscribed to the topic, you need to listen to a message stream passing the associated topic. The type of the parameter in the listen callback is byte array ",(0,i.kt)("inlineCode",{parentName:"p"},"UInt8List"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.courierMessageStream("chat/user1").listen((message) {\n    print("Message received: ${event}");\n});\n')),(0,i.kt)("h3",{id:"unsubscribe-from-topic"},"Unsubscribe from Topic"),(0,i.kt)("p",null,"To unsubscribe from a topic, simply invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"unsubscribe")," passing the topic string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.unsubscribe("chat/user/1");\n')))}b.isMDXComponent=!0}}]);