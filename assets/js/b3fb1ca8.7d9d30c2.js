"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[928],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),l=u(r),b=s,m=l["".concat(c,".").concat(b)]||l[b]||d[b]||i;return r?n.createElement(m,o(o({ref:t},p),{},{components:r})):n.createElement(m,o({ref:t},p))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=r.length,o=new Array(i);o[0]=b;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[l]="string"==typeof e?e:s,o[1]=a;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},1264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>u});var n=r(7462),s=(r(7294),r(3905));const i={},o=void 0,a={unversionedId:"Subscribe & Receive Message",id:"Subscribe & Receive Message",title:"Subscribe & Receive Message",description:"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message.",source:"@site/docs/Subscribe & Receive Message.md",sourceDirName:".",slug:"/Subscribe & Receive Message",permalink:"/courier-flutter/docs/Subscribe & Receive Message",draft:!1,editUrl:"https://github.com/gojek/courier-flutter/edit/main/docs/docs/Subscribe & Receive Message.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Message QoS",permalink:"/courier-flutter/docs/Message QoS"},next:{title:"Publish Message",permalink:"/courier-flutter/docs/Publish Message"}},c={},u=[{value:"Subscribe to Topic",id:"subscribe-to-topic",level:3},{value:"Receive Message from Subscribed Topic",id:"receive-message-from-subscribed-topic",level:3},{value:"Receive Bytes(Uint8List) from Subscribed Topic",id:"receive-bytesuint8list-from-subscribed-topic",level:3},{value:"Unsubscribe from Topic",id:"unsubscribe-from-topic",level:3}],p={toc:u},l="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(l,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"After we have connected to broker, we can subscribe to any topic that we want and receive emitted message from that particular topic when the broker pushes the message."),(0,s.kt)("h3",{id:"subscribe-to-topic"},"Subscribe to Topic"),(0,s.kt)("p",null,"To subscribe to a topic from the broker, invoke ",(0,s.kt)("inlineCode",{parentName:"p"},"susbscribe")," method on CourierClient passing the topic string and QoS."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.subscribe("chat/user1", QoS.one);\n')),(0,s.kt)("h3",{id:"receive-message-from-subscribed-topic"},"Receive Message from Subscribed Topic"),(0,s.kt)("p",null,"After you have subscribed to the topic, you need to listen to a message stream passing the associated topic. ",(0,s.kt)("inlineCode",{parentName:"p"},"courierMessageStream")," will loop message adapters trying to decode the data into specified type, the first one that is able to decode, will be used. You will need pass a decoder parameter to return instance of your object given 1 dynamic parameter depending on the adapter (JSONMessageAdapter pass you ",(0,s.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),", BytesMessageAdapter pass you ",(0,s.kt)("inlineCode",{parentName:"p"},"Uint8List"),")"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'/// This uses BytesMessageAdapter and used constructor tear-offs TestData.fromBytes\ncourierClient\n    .courierMessageStream<TestData>(\n        "orders/6b57d4e5-0fce-4917-b343-c8a1c77405e5/update",\n        decoder: TestData.fromBytes)\n    .listen((event) {\n  print("Message received testData: ${event.textMessage}");\n});\n\n/// This uses JSONMessageAdapter and used constructor tear-offs Person.fromJson\ncourierClient\n    .courierMessageStream<Person>(\n        "person/6b57d4e5-0fce-4917-b343-c8a1c77405e5/update",\n        decoder: Person.fromJson)\n    .listen((person) {\n  print("Message received person: ${person.name}");\n')),(0,s.kt)("h3",{id:"receive-bytesuint8list-from-subscribed-topic"},"Receive Bytes(Uint8List) from Subscribed Topic"),(0,s.kt)("p",null,"After you have subscribed to the topic, you need to listen to a message stream passing the associated topic. The type of the parameter in the ",(0,s.kt)("inlineCode",{parentName:"p"},"courierBytesStream")," listen callback is byte array ",(0,s.kt)("inlineCode",{parentName:"p"},"UInt8List"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.courierBytesStream("chat/user1").listen((message) {\n    print("Message received: ${event}");\n});\n')),(0,s.kt)("h3",{id:"unsubscribe-from-topic"},"Unsubscribe from Topic"),(0,s.kt)("p",null,"To unsubscribe from a topic, simply invoke ",(0,s.kt)("inlineCode",{parentName:"p"},"unsubscribe")," passing the topic string."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-dart"},'courierClient.unsubscribe("chat/user/1");\n')))}d.isMDXComponent=!0}}]);